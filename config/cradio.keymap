// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT
/*                              34 KEY MATRIX / LAYOUT MAPPING

    ╭────────────────────┬────────────────────╮ ╭─────────────────────┬─────────────────────╮
    │  0   1   2   3   4 │  5   6   7   8   9 │ │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
    │ 10  11  12  13  14 │ 15  16  17  18  19 │ │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
    │ 20  21  22  23  24 │ 25  26  27  28  29 │ │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
    ╰───────────╮ 30  31 │ 32  33 ╭───────────╯ ╰───────────╮ LH1 LH0 │ RH0 RH1 ╭───────────╯
                ╰────────┴────────╯                         ╰─────────┴─────────╯             */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//#include <dt-bindings/zmk/mouse.h>
// Home row mods macro (CAGS for MacOS)

#define HRML(k1,k2,k3,k4) &thm LCTRL k1  &thm LALT k2  &thm LGUI k3  &thm LSHFT k4
#define HRMR(k1,k2,k3,k4) &thm RSHFT k1  &thm RGUI k2  &thm RALT k3  &thm RCTRL k4

/ {
    behaviors {
        // timerless homerow mods

        thm: timerless_homerow_mods {
            label = "timeless_homerow_mods";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>; // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release; // delay positional check until key-release
        };

        // layer-tap for thumb keys

        mlt: my_layer_tap {
            label = "my_layer_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>; // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&mo>, <&kp>;

            hold-trigger-on-release; // delay positional check until key-release
        };

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp ESC>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // ESC

        combo_todo {
            bindings = <&todo>;
            key-positions = <14 15>;
            layers = <0>;
            timeout-ms = <50>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <2 3>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        combo_repeat {
            bindings = <&none>;
            key-positions = <12 13>;
        };

        combo_copy {
            bindings = <&kp LG(C)>;
            key-positions = <21 22>;
        };

        combo_paste {
            bindings = <&kp LG(V)>;
            key-positions = <22 23>;
        };

        combo_atsign {
            bindings = <&kp AT_SIGN>;
            key-positions = <1 11>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <12 2>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <11 21>;
        };

        combo_blsh {
            bindings = <&kp BACKSLASH>;
            key-positions = <12 22>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <23 13>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <14 24>;
        };

        combo_bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
        };

        combo_excl {
            bindings = <&kp EXCLAMATION>;
            key-positions = <7 8>;
        };

        combo_lpar {
            bindings = <&kp LPAR>;
            key-positions = <3 4>;
        };

        combo_rpar {
            bindings = <&kp RPAR>;
            key-positions = <5 6>;
        };

        combo_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <23 24>;
        };

        combo_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <25 26>;
        };

        combo_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <13 14>;
        };

        combo_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <15 16>;
        };

        combo_rml {
            bindings = <&none>;
            key-positions = <16 17>;
        };

        combo_rmr {
            bindings = <&none>;
            key-positions = <17 18>;
        };

        combo_rll {
            bindings = <&none>;
            key-positions = <26 27>;
        };

        combo_rlr {
            bindings = <&none>;
            key-positions = <27 28>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <5 15>;
        };

        combo_under {
            bindings = <&kp UNDERSCORE>;
            key-positions = <15 25>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <16 26>;
        };

        combo_star {
            bindings = <&kp ASTERISK>;
            key-positions = <7 17>;
        };

        combo_rmvl {
            bindings = <&none>;
            key-positions = <17 27>;
        };

        combo_amps {
            bindings = <&kp AMPERSAND>;
            key-positions = <8 18>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <18 28>;
        };

        combo_tab_next {
            bindings = <&kp LC(TAB)>;
            key-positions = <0 10>;
        };

        combo_tab_prev {
            bindings = <&kp LS(LC(TAB))>;
            key-positions = <10 20>;
        };
    };

    macros {
        todo: todo {
            compatible = "zmk,behavior-macro";
            label = "TODO";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <&kp MINUS &kp SPACE &kp LBKT &kp SPACE &kp RBKT &kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W        &kp E        &kp R         &kp T    &kp Y      &kp U         &kp I        &kp O        &kp P
&thm LCTRL A  &thm LALT S  &thm LGUI D  &thm LSHFT F  &kp G    &kp H      &thm RSHFT J  &thm RGUI K  &thm RALT L  &thm RCTRL SEMI
&kp Z         &kp X        &kp C        &kp V         &kp B    &kp N      &kp M         &kp COMMA    &kp DOT      &kp FSLH
                                        &mlt 2 TAB    &td0     &kp ENTER  &mlt 1 BSPC
            >;
        };

        // use combos for [] {}

        right_layer {
            bindings = <
&none         &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &none      &none   &none   &none  &none  &none
&kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &none      &none   &none   &none  &none  &none
&none         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none      &none   &none   &none  &none  &none
                                          &trans        &kp ESC    &trans  &trans
            >;
        };

        left_layer {
            bindings = <
&kp F1        &kp F2        &kp F3      &kp F4                &kp F5                  &kp F6    &kp F7    &kp F8     &kp F9     &kp F10
&kp C_VOL_UP  &kp C_VOL_DN  &kp K_MUTE  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC    &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT  &kp F11
&kp C_PREV    &kp C_NEXT    &kp C_PLAY  &trans                &trans                  &kp HOME  &kp END   &kp PG_UP  &kp PG_DN  &kp F12
                                        &trans                &trans                  &trans    &trans
            >;
        };

        tri_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans                &kp LA(LC(LG(LEFT)))  &kp LA(LC(LG(RIGHT)))  &trans  &trans
&bootloader   &trans        &trans        &trans        &trans          &trans                &kp LA(LC(LEFT))      &kp LC(LA(RIGHT))      &trans  &trans
&bt BT_CLR    &trans        &trans        &trans        &trans          &kp LS(LG(NUMBER_4))  &kp LA(LC(ENTER))     &kp LA(LC(C))          &trans  &trans
                                          &trans        &trans          &trans                &trans
            >;
        };
    };
};
